let SearchController={};function PickNextMove(e){let r=0,o=-1,a=e;for(r=e;r<GameBoard.moveListStart[GameBoard.ply+1];++r)GameBoard.moveScores[r]>o&&(o=GameBoard.moveScores[r],a=r);if(a!=e){let t=0;t=GameBoard.moveScores[e],GameBoard.moveScores[e]=GameBoard.moveScores[a],GameBoard.moveScores[a]=t,t=GameBoard.moveList[e],GameBoard.moveList[e]=GameBoard.moveList[a],GameBoard.moveList[a]=t}}function ClearPvTable(){for(index=0;index<PVENTRIES;index++)GameBoard.PvTable[index].move=NOMOVE,GameBoard.PvTable[index].posKey=0}function CheckUp(){$.now()-SearchController.start>SearchController.time&&(SearchController.stop=BOOL.TRUE)}function IsRepetition(){let e=0;for(e=GameBoard.hisPly-GameBoard.fiftyMove;e<GameBoard.hisPly-1;++e)if(GameBoard.posKey==GameBoard.history[e].posKey)return BOOL.TRUE;return BOOL.FALSE}function Quiescence(e,r){if(0==(2047&SearchController.nodes)&&CheckUp(),SearchController.nodes++,(IsRepetition()||GameBoard.fiftyMove>=100)&&0!=GameBoard.ply)return 0;if(GameBoard.ply>MAXDEPTH-1)return EvalPosition();let o=EvalPosition();if(o>=r)return r;o>e&&(e=o),GenerateCaptures();let a=0,t=0,l=e,n=NOMOVE,i=NOMOVE;for(a=GameBoard.moveListStart[GameBoard.ply];a<GameBoard.moveListStart[GameBoard.ply+1];++a)if(PickNextMove(a),i=GameBoard.moveList[a],MakeMove(i)!=BOOL.FALSE){if(t++,o=-Quiescence(-r,-e),TakeMove(),SearchController.stop==BOOL.TRUE)return 0;if(o>e){if(o>=r)return 1==t&&SearchController.fhf++,SearchController.fh++,r;e=o,n=i}}return e!=l&&StorePvMove(n),e}function AlphaBeta(e,r,o){if(o<=0)return Quiescence(e,r);if(0==(2047&SearchController.nodes)&&CheckUp(),SearchController.nodes++,(IsRepetition()||GameBoard.fiftyMove>=100)&&0!=GameBoard.ply)return 0;if(GameBoard.ply>MAXDEPTH-1)return EvalPosition();let a=SqAttacked(GameBoard.pList[PCEINDEX(Kings[GameBoard.side],0)],1^GameBoard.side);a==BOOL.TRUE&&o++;let t=-INFINITE;GenerateMoves();let l=0,n=0,i=e,s=NOMOVE,d=NOMOVE,c=ProbePvTable();if(c!=NOMOVE)for(l=GameBoard.moveListStart[GameBoard.ply];l<GameBoard.moveListStart[GameBoard.ply+1];++l)if(GameBoard.moveList[l]==c){GameBoard.moveScores[l]=2e6;break}for(l=GameBoard.moveListStart[GameBoard.ply];l<GameBoard.moveListStart[GameBoard.ply+1];++l)if(PickNextMove(l),d=GameBoard.moveList[l],MakeMove(d)!=BOOL.FALSE){if(n++,t=-AlphaBeta(-r,-e,o-1),TakeMove(),SearchController.stop==BOOL.TRUE)return 0;if(t>e){if(t>=r)return 1==n&&SearchController.fhf++,SearchController.fh++,0==(d&MFLAGCAP)&&(GameBoard.searchKillers[MAXDEPTH+GameBoard.ply]=GameBoard.searchKillers[GameBoard.ply],GameBoard.searchKillers[GameBoard.ply]=d),r;0==(d&MFLAGCAP)&&(GameBoard.searchHistory[GameBoard.pieces[FROMSQ(d)]*BRD_SQ_NUM+TOSQ(d)]+=o*o),e=t,s=d}}return 0==n?a==BOOL.TRUE?-MATE+GameBoard.ply:0:(e!=i&&StorePvMove(s),e)}function ClearForSearch(){let e=0;for(e=0;e<14*BRD_SQ_NUM;++e)GameBoard.searchHistory[e]=0;for(e=0;e<3*MAXDEPTH;++e)GameBoard.searchKillers[e]=0;ClearPvTable(),GameBoard.ply=0,SearchController.nodes=0,SearchController.fh=0,SearchController.fhf=0,SearchController.start=$.now(),SearchController.stop=BOOL.FALSE}function SearchPosition(){let e,r,o,a=NOMOVE,t=-INFINITE,l=-INFINITE,n=0;for(ClearForSearch(),n=1;n<=SearchController.depth&&(l=AlphaBeta(-INFINITE,INFINITE,n),SearchController.stop!=BOOL.TRUE);++n){for(t=l,a=ProbePvTable(),e="D:"+n+" Best:"+PrMove(a)+" Score:"+t+" nodes:"+SearchController.nodes,r=GetPvLine(n),e+=" Pv:",o=0;o<r;++o)e+=" "+PrMove(GameBoard.Pletray[o]);1!=n&&(e+=" Ordering:"+(SearchController.fhf/SearchController.fh*100).toFixed(2)+"%"),console.log(e)}SearchController.best=a,SearchController.thinking=BOOL.FALSE,UpdateDOMStats(t,n)}function UpdateDOMStats(e,r){let o=(e/100).toFixed(2);Math.abs(e)>MATE-MAXDEPTH&&(o="Score: Mate In "+(MATE-Math.abs(e)-1)+" Moves"),$("#OrderingOut").text((SearchController.fhf/SearchController.fh*100).toFixed(2)+"%"),$("#DepthOut").text(r),$("#ScoreOut").text(o),$("#NodesOut").text(SearchController.nodes),$("#TimeOut").text((($.now()-SearchController.start)/1e3).toFixed(1)+" Sec"),$("#BestOut").text(PrMove(SearchController.best))}SearchController.nodes,SearchController.fh,SearchController.fhf,SearchController.depth,SearchController.time,SearchController.start,SearchController.stop,SearchController.best,SearchController.thinking;